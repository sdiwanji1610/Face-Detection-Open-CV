import face_recognition
import imutils
import pickle
import time
import cv2
import os
from google.colab.patches import cv2_imshow

# Find path of xml file containing haarcascade file
cascPathface = os.path.dirname(
    cv2.__file__) + "/data/haarcascade_frontalface_alt2.xml"

# Load the haarcascade in the cascade classifier
faceCascade = cv2.CascadeClassifier(cascPathface)

# Load the known faces and embeddings saved in the last file
data = pickle.loads(open('face_enc', "rb").read())

# Find path to the image you want to detect a face and pass it here
image = cv2.imread("/content/face.jpg")
rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Convert the image to Greyscale for haarcascade
gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
faces = faceCascade.detectMultiScale(gray,
                                     scaleFactor=1.1,
                                     minNeighbors=5,
                                     minSize=(60, 60),
                                     flags=cv2.CASCADE_SCALE_IMAGE)

# The facial embeddings for the face in input
encodings = face_recognition.face_encodings(rgb)
names = []

# Loop over the facial embeddings in case
# we have multiple embeddings for multiple faces
for encoding in encodings:
    # Compare encodings with encodings in data["encodings"]
    # Matches contain an array with boolean values, True for the embeddings it matches closely
    # and False for the rest
    matches = face_recognition.compare_faces(data["encodings"], encoding)

    # Set name to "Unknown" if no encoding matches
    name = "Unknown"

    # Check to see if we have found a match
    if True in matches:
        # Find positions at which we get True and store them
        matchedIdxs = [i for (i, b) in enumerate(matches) if b]
        counts = {}

        # Loop over the matched indexes and maintain a count for
        # each recognized face
        for i in matchedIdxs:
            # Check the names at respective indexes we stored in matchedIdxs
            name = data["names"][i]

            # Increase the count for the name we got
            counts[name] = counts.get(name, 0) + 1

        # Set the name which has the highest count
        name = max(counts, key=counts.get)

    # Update the list of names
    names.append(name)

# Loop over the recognized faces
for ((x, y, w, h), name) in zip(faces, names):
    # Rescale the face coordinates
    # Draw the predicted face name on the image
    cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
    cv2.putText(image, name, (x, y), cv2.FONT_HERSHEY_SIMPLEX,
                0.75, (0, 255, 0), 2)

# Display the image
cv2_imshow(image)
cv2.waitKey(0)
